<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Getting-starteds on Scalatra</title>
    <link>https://scalatra.github.io/scalatra-docbuild/getting-started.xml</link>
    <description>Recent content in Getting-starteds on Scalatra</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Scalatra Team</copyright>
    <atom:link href="https://scalatra.github.io/scalatra-docbuild/getting-started.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>First steps</title>
      <link>https://scalatra.github.io/scalatra-docbuild/getting-started/first-project.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://scalatra.github.io/scalatra-docbuild/getting-started/first-project.html</guid>
      <description>

&lt;h2 id=&#34;generate-a-scalatra-project&#34;&gt;Generate a Scalatra project&lt;/h2&gt;

&lt;p&gt;Now that &lt;a href=&#34;installation.html&#34;&gt;installation&lt;/a&gt; is out of the way, you can
generate a project:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sbt new scalatra/scalatra.g8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will check out a pre-built application skeleton for you (from &lt;a href=&#34;https://github.com/scalatra/scalatra.g8&#34;&gt;GitHub&lt;/a&gt;),
and ask you some questions about your application:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sbt new scalatra/scalatra.g8
organization [com.example]:
name [My Scalatra Web App]:
version [0.1.0-SNAPSHOT]:
servlet_name [MyScalatraServlet]:
package [com.example.app]:
scala_version [2.13.4]:
sbt_version [1.4.5]:
scalatra_version [2.7.0]:

Template applied in ./my-scalatra-web-app
&lt;/code&gt;&lt;/pre&gt;

&lt;dl class=&#34;dl-horizontal&#34;&gt;
  &lt;dt&gt;organization&lt;/dt&gt;
  &lt;dd&gt;
    Used for publishing.
    Should be the reverse of a domain name you control.
    If you don&#39;t own a domain, &lt;code&gt;com.github.username&lt;/code&gt; is a popular choice.
  &lt;/dd&gt;
  &lt;dt&gt;package&lt;/dt&gt;
  &lt;dd&gt;
    All Scala code belongs in a package.
    The
    &lt;a href=&#34;http://docs.scala-lang.org/style/naming-conventions.html#packages&#34;&gt;
      Scala Style Guide
    &lt;/a&gt; recommends that your packages start with your organization.
    This convention is used across multiple JVM languages and gives your
    project a globally unique namespace.
  &lt;/dd&gt;
  &lt;dt&gt;name&lt;/dt&gt;
  &lt;dd&gt;
    The name of your project.
    g8 will generate a project into a folder of that name, and the artifacts
    you publish will be based on that name.
  &lt;/dd&gt;
  &lt;dt&gt;version&lt;/dt&gt;
  &lt;dd&gt;
    Your project&#39;s version.
    This is entirely up to you, but we like
    &lt;a href=&#34;http://semver.org&#34;&gt;semantic versioning&lt;/a&gt;.
  &lt;/dd&gt;
  &lt;dt&gt;servlet_name&lt;/dt&gt;
  &lt;dd&gt;
    The name of your servlet class.
    This might be something like &lt;code&gt;BlogServlet&lt;/code&gt; or just &lt;code&gt;Blog&lt;/code&gt;.
  &lt;/dd&gt;
  &lt;dt&gt;scala_version&lt;/dt&gt;
  &lt;dd&gt;
    The Scala version to use.
    The bottom of the &lt;a href=&#34;http://scalatra.org/&#34;&gt;homepage&lt;/a&gt; lists which Scala versions are compatible with the latest Scalatra releases.
    When in doubt, use the default.
  &lt;/dd&gt;
  &lt;dt&gt;sbt_version&lt;/dt&gt;
  &lt;dd&gt;
    The sbt version.
  &lt;/dd&gt;
  &lt;dt&gt;scalatra_version&lt;/dt&gt;
  &lt;dd&gt;
    The Scalatra version to use.
    See the &lt;a href=&#34;https://scalatra.org/&#34;&gt;homepage&lt;/a&gt; for a list. You can choose a stable version or if you want to try out new features go with a RC or SNAPSHOT.
  &lt;/dd&gt;
&lt;/dl&gt;

&lt;h2 id=&#34;building&#34;&gt;Building&lt;/h2&gt;

&lt;p&gt;Scala is a compiled language, so you need to build your Scalatra project.&lt;/p&gt;

&lt;p&gt;Enter your application&amp;rsquo;s top-level directory, just execute &lt;code&gt;sbt&lt;/code&gt; to start building
your Scalatra project.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd /your/project/directory
$ sbt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;sbt will also take care of downloading an entire Scalatra development
environment if you don&amp;rsquo;t have one yet. That means sbt may spend some
time downloading Scalatra and its libraries on first run.&lt;/p&gt;

&lt;h2 id=&#34;hello-world&#34;&gt;Hello world&lt;/h2&gt;

&lt;p&gt;Now that Scalatra is installed, how about making your first application?
Source files go into &lt;code&gt;src/main/scala/com/example/app&lt;/code&gt;
(substitute your package for &lt;code&gt;com/example/app&lt;/code&gt;).
Open &lt;code&gt;src/main/scala/com/example/app/MyScalatraServlet.scala&lt;/code&gt;, or whatever
you named your servlet when you generated your project with Scalatra template:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;package com.example.app

import org.scalatra._

class MyScalatraServlet extends ScalatraServlet {

  get(&amp;quot;/&amp;quot;) {
    views.html.hello()
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you haven&amp;rsquo;t already done so, from your project root, you can run the
project:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sbt
&amp;gt; jetty:start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The application starts on &lt;a href=&#34;http://localhost:8080&#34;&gt;http://localhost:8080&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;span class=&#34;badge badge-info&#34;&gt;&lt;i class=&#34;glyphicon glyphicon-flag&#34;&gt;&lt;/i&gt;&lt;/span&gt;
  As you can see, Scalatra doesn&#39;t force you to setup much infrastructure: a
  request to a URL evaluates some Scala code and returns some text in
  response.
  Whatever the block returns is sent back to the browser.
&lt;/div&gt;

&lt;p&gt;Scalatra allows you to return strongly-typed results from any of its actions.
The action above returns an XML literal - you could easily change it to
return a string by altering the action:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;get(&amp;quot;/&amp;quot;) {
  &amp;quot;Hi there!&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Returning a raw string is not something you&amp;rsquo;ll do particularly often -
usually you will want to return formatted HTML that is the product of a
templating system, or an output format like JSON.
See the &lt;em&gt;views&lt;/em&gt; section of our &lt;a href=&#34;../../guides/&#34;&gt;guides&lt;/a&gt; for more info.&lt;/p&gt;

&lt;h2 id=&#34;automatic-code-reloading&#34;&gt;Automatic code reloading&lt;/h2&gt;

&lt;p&gt;Restarting an application manually after every code change is both slow and
painful. It can easily be avoided by using a tool for automatic code reloading.&lt;/p&gt;

&lt;p&gt;sbt will allow you to &lt;a href=&#34;https://www.scala-sbt.org/1.x/docs/Triggered-Execution.html&#34;&gt;signal a restart of the application when it detects
code changes&lt;/a&gt;.
The syntax for restarting involves adding &lt;code&gt;~&lt;/code&gt; in front of the command you
want to re-execute.
To recompile and reload your application automatically, run the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sbt
&amp;gt; ~jetty:start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that you&amp;rsquo;ve got a (rather simplistic) running application, you may want
to &lt;a href=&#34;project-structure.html&#34;&gt;understand more&lt;/a&gt; about the project setup, or
dive straight into our &lt;a href=&#34;../../guides/&#34;&gt;guides&lt;/a&gt;, which show you how to perform
common development tasks.&lt;/p&gt;

&lt;p&gt;Many of the Scalatra guides have companion code projects, so you can learn
by seeing running example code in action.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting started with Scalatra</title>
      <link>https://scalatra.github.io/scalatra-docbuild/getting-started.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://scalatra.github.io/scalatra-docbuild/getting-started.html</guid>
      <description>&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;Install Scalatra in 2 easy steps. You may
  already have a lot of what you need.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;installation.html&#34; class=&#34;btn btn-primary&#34;&gt;Go »&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;First project&lt;/h2&gt;
&lt;p&gt;The first steps you take when learning something new are usually the
  most difficult. Our code generators and step-by-step instructions
  can help ease you into Scalatra development.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;first-project.html&#34; class=&#34;btn btn-primary&#34;&gt;Go »&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Project structure&lt;/h2&gt;
&lt;p&gt;Understanding a Scalatra project isn&#39;t difficult, and it can save you
  a lot of time if you understand a bit about what&#39;s happening under the hood.
  Here are the basics.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;project-structure.html&#34; class=&#34;btn btn-primary&#34;&gt;Go »&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;IDE support (optional)&lt;/h2&gt;
&lt;p&gt;
  Since Scalatra is a no-magic framework, you can benefit from the Scala
  support in IntelliJ IDEA, and Metals.
&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;ide-support.html&#34; class=&#34;btn btn-primary&#34;&gt;Go »&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>IDE Support</title>
      <link>https://scalatra.github.io/scalatra-docbuild/getting-started/ide-support.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://scalatra.github.io/scalatra-docbuild/getting-started/ide-support.html</guid>
      <description>&lt;p&gt;Because Scalatra is a pure-Scala no-magic framework, Scala IDEs such as
&lt;a href=&#34;https://confluence.jetbrains.net/display/SCA/Scala+Plugin+for+IntelliJ+IDEA&#34;&gt;IntelliJ&lt;/a&gt;,
and &lt;a href=&#34;https://scalameta.org/metals/&#34;&gt;Metals&lt;/a&gt; (Scala language server)
&amp;ldquo;understand&amp;rdquo; Scalatra and can assist your development.&lt;/p&gt;

&lt;p&gt;For more information on how to use each of them, please refer to the official website at the link.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>https://scalatra.github.io/scalatra-docbuild/getting-started/installation.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://scalatra.github.io/scalatra-docbuild/getting-started/installation.html</guid>
      <description>

&lt;p&gt;Getting started with a new web framework can be a bit scary.
Luckily, Scalatra is easy to install, as it has relatively few dependencies.&lt;/p&gt;

&lt;p&gt;It can run on Windows, Mac OS X, Linux, or BSD.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;1-install-a-jdk&#34;&gt;1. Install a JDK&lt;/h2&gt;

&lt;p&gt;Scalatra is web micro-framework written in Scala, so you&amp;rsquo;ll need to have a
Java Development Kit (JDK) installed.&lt;/p&gt;

&lt;p&gt;Many systems come with a JDK pre-loaded.&lt;/p&gt;

&lt;p&gt;Run &lt;code&gt;java -version&lt;/code&gt; and &lt;code&gt;javac -version&lt;/code&gt; in a terminal to find if yours
does. The output should look something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ java -version
java version &amp;quot;1.8.0_131&amp;quot;
Java(TM) SE Runtime Environment (build 1.8.0_131-b11)
Java HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ javac -version
javac 1.8.0_131
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You need Java 8 or above (Oracle&amp;rsquo;s JDK, OpenJDK, AdoptOpenJDK and various other distributions exist), which will show up as version 1.8. Java 7 is no longer supported in Scalatra 2.5.&lt;/p&gt;

&lt;p&gt;If you don&amp;rsquo;t yet have Java installed, you can find out how to install it for your system over at
&lt;a href=&#34;https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html&#34;&gt;the Oracle&amp;rsquo;s Java 8 download page&lt;/a&gt;
or &lt;a href=&#34;http://openjdk.java.net/install/index.html&#34;&gt;the OpenJDK installation page&lt;/a&gt; or &lt;a href=&#34;https://adoptopenjdk.net/&#34;&gt;AdoptOpenJDK download page&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;2-install-sbt&#34;&gt;2. Install sbt&lt;/h2&gt;

&lt;p&gt;Once you&amp;rsquo;re sure you&amp;rsquo;ve got Java installed, you will need to install the &lt;em&gt;sbt&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.scala-sbt.org/&#34;&gt;sbt&lt;/a&gt; is a build tool for Scala, Java, and more.
It can create a new project from the template repository.&lt;/p&gt;

&lt;p&gt;In order to create a new project of Scalatra from the template, &lt;em&gt;sbt 0.13.13&lt;/em&gt; or later needs to be installed.
To install sbt, refer to &lt;a href=&#34;https://www.scala-sbt.org/1.x/docs/Setup.html&#34;&gt;the Installing sbt page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For example, if it is macOS, you can install it by brew command as follows.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Bash&#34;&gt;$ brew install sbt
$ sbt
...
...
&amp;gt; sbtVersion
[info] 1.4.6
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;With installation out of the way, head over to the &amp;ldquo;&lt;a href=&#34;first-project.html&#34;&gt;first project&lt;/a&gt;&amp;ldquo;
page, which will show you how to generate, build, and run a Scalatra application.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Project structure</title>
      <link>https://scalatra.github.io/scalatra-docbuild/getting-started/project-structure.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://scalatra.github.io/scalatra-docbuild/getting-started/project-structure.html</guid>
      <description>

&lt;h2 id=&#34;paths&#34;&gt;Paths&lt;/h2&gt;

&lt;p&gt;The recommended way of structuring a Scalatra project is as follows. It&amp;rsquo;s
what you get when you generate a new project using &lt;code&gt;sbt new&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;build.sbt               &amp;lt;= dependencies and project config are set in here

project
|_build.properties      &amp;lt;= specifies what version of sbt to use
|_plugins.sbt           &amp;lt;= sbt plugins can be added here

src
|_ main
|  |_ resources
|     |_ logback.xml
|  |_ scala
|  |  |   |_ScalatraBootstrap.scala     &amp;lt;= mount servlets in here
|  |  |_org
|  |      |_ yourdomain
|  |         |_ projectname
|  |            |_ MyScalatraServlet.scala
|  |_ twirl
|  |  |_layouts
|  |    |_default.scala.html
|  |  |_views
|  |    |_hello.scala.html
|  |_ webapp
|     |_ WEB-INF
|        |_ web.xml
|_ test
   |_ scala
      |_ org
         |_ yourdomain
            |_ projectname
               |_ MyScalatraServletTests.scala
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The basic structure should be reasonably familiar to anybody who&amp;rsquo;s seen a
Rails, Sinatra, or Padrino application. Your views go in the views folder,
layouts (which wrap views) go in the layouts folder.&lt;/p&gt;

&lt;p&gt;The Scalatra template project puts your Scala application code into a series of
namespaced directories: in the example above, &lt;code&gt;org.yourdomain.projectname&lt;/code&gt;.
This is entirely optional. The &lt;a href=&#34;https://docs.scala-lang.org/style/&#34;&gt;Scala style guide&lt;/a&gt;
suggests doing it this way, but the language doesn&amp;rsquo;t do anything to enforce it.
If you want to, you can put all of your Scala code in the same directory for easier
navigation.&lt;/p&gt;

&lt;h2 id=&#34;serving-static-files&#34;&gt;Serving static files&lt;/h2&gt;

&lt;p&gt;Static files can be served out of the &lt;code&gt;webapp&lt;/code&gt; folder, which acts as the ROOT
directory. As with any servlet based application, the contents of this directory
are all public, with the exception of files in the WEB-INF directory.&lt;/p&gt;

&lt;p&gt;An example structure may help in understanding this.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;src
|_ main
   |_ scala
   |  |_ Web.scala
   |_ webapp
      |_ WEB-INF
      |  |_ web.xml
      |- stylesheets
      |  |_ default.css
      |- images
         |_ foo.jpg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this application, the only publicly accessible files will be at
&lt;code&gt;stylesheets/default.css&lt;/code&gt; and &lt;code&gt;images/foo.jpg&lt;/code&gt;. Everything else will be
protected by the web application container.&lt;/p&gt;

&lt;h2 id=&#34;scalatraservlet-vs-scalatrafilter&#34;&gt;ScalatraServlet vs. ScalatraFilter&lt;/h2&gt;

&lt;p&gt;There are two base classes you can inherit from in order to make a
Scalatra application: &lt;code&gt;ScalatraServlet&lt;/code&gt; and &lt;code&gt;ScalatraFilter&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;class YourServlet extends ScalatraServlet {
  // your class here
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;vs.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;class YourFilter extends ScalatraFilter {
  // your class here
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The main difference is the default behavior when a route is not found.
A &lt;code&gt;ScalatraFilter&lt;/code&gt; will delegate to the next filter or servlet in the chain (as
configured by &lt;code&gt;web.xml&lt;/code&gt;), whereas a &lt;code&gt;ScalatraServlet&lt;/code&gt; will return a 404
response.&lt;/p&gt;

&lt;p&gt;Another difference is that &lt;code&gt;ScalatraFilter&lt;/code&gt; matches routes relative to
the WAR&amp;rsquo;s context path. &lt;code&gt;ScalatraServlet&lt;/code&gt; matches routes relative to the
servlet path. This allows you to mount multiple servlets in different namespaces
in the same WAR.&lt;/p&gt;

&lt;h3 id=&#34;use-scalatrafilter-if&#34;&gt;Use ScalatraFilter if:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;You are migrating a legacy application inside the same URL space&lt;/li&gt;
&lt;li&gt;You want to serve static content from the WAR rather than a
dedicated web server&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;use-scalatraservlet-if&#34;&gt;Use ScalatraServlet if:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;You want to match routes with a prefix deeper than the context path.&lt;/li&gt;
&lt;li&gt;You&amp;rsquo;re not sure which to use!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;scalatra-s-sbt-dependencies&#34;&gt;Scalatra&amp;rsquo;s sbt dependencies&lt;/h2&gt;

&lt;p&gt;Scalatra uses &lt;a href=&#34;https://www.scala-sbt.org/&#34;&gt;sbt&lt;/a&gt;, or sbt, as a build system.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;build.sbt&lt;/code&gt; file defines the libraries which your application will depend on,
so that &lt;code&gt;sbt&lt;/code&gt; can download them for you and build your Scalatra project.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an example Scalatra &lt;code&gt;build.sbt&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val ScalatraVersion = &amp;quot;2.7.0&amp;quot;

organization := &amp;quot;com.example&amp;quot;

name := &amp;quot;My Scalatra Web App&amp;quot;

version := &amp;quot;0.1.0-SNAPSHOT&amp;quot;

scalaVersion := &amp;quot;2.13.4&amp;quot;

resolvers += Classpaths.typesafeReleases

libraryDependencies ++= Seq(
  &amp;quot;org.scalatra&amp;quot; %% &amp;quot;scalatra&amp;quot; % ScalatraVersion,
  &amp;quot;org.scalatra&amp;quot; %% &amp;quot;scalatra-scalatest&amp;quot; % ScalatraVersion % &amp;quot;test&amp;quot;,
  &amp;quot;ch.qos.logback&amp;quot; % &amp;quot;logback-classic&amp;quot; % &amp;quot;1.2.3&amp;quot; % &amp;quot;runtime&amp;quot;,
  &amp;quot;org.eclipse.jetty&amp;quot; % &amp;quot;jetty-webapp&amp;quot; % &amp;quot;9.4.6.v20170531&amp;quot; % &amp;quot;container&amp;quot;,
  &amp;quot;javax.servlet&amp;quot; % &amp;quot;javax.servlet-api&amp;quot; % &amp;quot;3.1.0&amp;quot; % &amp;quot;provided&amp;quot;
)

enablePlugins(SbtTwirl)
enablePlugins(JettyPlugin)
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;alert alert-info&#34;&gt;
&lt;span class=&#34;badge badge-info&#34;&gt;&lt;i class=&#34;glyphicon glyphicon-flag&#34;&gt;&lt;/i&gt;&lt;/span&gt;
If you want to add any additional libraries to your project, add them to the
&lt;code&gt;libraryDependencies&lt;/code&gt; section.
Doing that and running &lt;code&gt;sbt&lt;/code&gt; again will download the dependency jar
libraries and make them available to your application.
If you don&#39;t know what the dependency details are, you can find out on
&lt;a href=&#34;https://search.maven.org&#34;&gt;https://search.maven.org&lt;/a&gt;.
&lt;/div&gt;

&lt;p&gt;The default dependencies are:&lt;/p&gt;

&lt;dl class=&#34;dl-horizontal&#34;&gt;
  &lt;dt&gt;scalatra&lt;/dt&gt;
  &lt;dd&gt;This is the core Scalatra module, and is required to run the framework.&lt;/dd&gt;
  &lt;dt&gt;scalatra-scalatest&lt;/dt&gt;
  &lt;dd&gt;
    This integrates the &lt;a href=&#34;https://github.com/scalatest/scalatest&#34;&gt;scalatest&lt;/a&gt;
    testing libraries.
    It is placed in the &lt;code&gt;test&lt;/code&gt; scope, so it&#39;s not deployed with your app
    in production.
  &lt;/dd&gt;
  &lt;dt&gt;logback-classic&lt;/dt&gt;
  &lt;dd&gt;
    Basic logging functionality, courtesy of
    &lt;a href=&#34;http://logback.qos.ch/&#34;&gt;Logback&lt;/a&gt;.
    It&#39;s placed in the &lt;code&gt;runtime&lt;/code&gt; scope so it&#39;s not bundled with your
    application.
    This allows the particular logging implementation (or no logging implementation
    at all), to be provided at runtime.
  &lt;/dd&gt;
  &lt;dt&gt;jetty-webapp&lt;/dt&gt;
  &lt;dd&gt;
    This is the embedded servlet container used by the web plugin.
    Your application should be portable to any servlet container supporting at least
    the 2.7 specification.
  &lt;/dd&gt;
  &lt;dt&gt;javax.servlet&lt;/dt&gt;
  &lt;dd&gt;
    Required for building your app.
    It is placed in the &lt;code&gt;provided&lt;/code&gt; configuration so that it is not bundled
    with your application.
    Your servlet container will provide this at deployment time.
  &lt;/dd&gt;
&lt;/dl&gt;
</description>
    </item>
    
  </channel>
</rss>